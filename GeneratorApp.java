import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.nio.file.*;
import java.security.*;
import java.security.cert.CertificateException;
import java.util.jar.*;

public class GeneratorApp {

    private static final String

    public static void main(String[] args) {
        SwingUtilities.invokeLater(GeneratorApp::showGUI);
    }

    private static void showGUI() {
        JTextArea input = new JTextArea(5, 30);
        input.setLineWrap(true);
        input.setWrapStyleWord(true);

        JScrollPane scrollPane = new JScrollPane(input);

        int result = JOptionPane.showConfirmDialog(null, scrollPane, "Enter Your Secret",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result != JOptionPane.OK_OPTION) return;

        String secret = input.getText();
        if (secret.length() > PLACEHOLDER.length()) {
            JOptionPane.showMessageDialog(null,
                    "Secret too long! Max " + PLACEHOLDER.length() + " characters.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select SecretViewer .class or .jar file");
        int chooseResult = chooser.showOpenDialog(null);

        if (chooseResult != JFileChooser.APPROVE_OPTION) return;

        File selectedFile = chooser.getSelectedFile();
        String name = selectedFile.getName();

        try {
            Path selectedPath = selectedFile.toPath();
            Path backupDir = Paths.get("build");
            Files.createDirectories(backupDir);

            Path backupPath = backupDir.resolve(name);
            Files.copy(selectedPath, backupPath, StandardCopyOption.REPLACE_EXISTING);

            if (name.endsWith(".class")) {
                modifyClassFile(selectedPath, secret);
            } else if (name.endsWith(".jar")) {
                modifyJarFile(selectedPath, secret);

                int signConfirm = JOptionPane.showConfirmDialog(null,
                        "Do you want to sign the modified JAR file?",
                        "Sign Confirmation", JOptionPane.YES_NO_OPTION);

                if (signConfirm == JOptionPane.YES_OPTION) {
                    signJar(selectedPath.toFile());
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Unsupported file type: must be .class or .jar",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JOptionPane.showMessageDialog(null,
                    "Secret embedded successfully!\nOriginal backed up to /build/" + name,
                    "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null,
                    "Error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static void modifyClassFile(Path classFile, String secret) throws IOException {
        byte[] data = Files.readAllBytes(classFile);
        byte[] placeholder = PLACEHOLDER.getBytes();
        byte[] paddedSecret = String.format("%-" + placeholder.length + "s", secret).getBytes();

        int index = indexOf(data, placeholder);
        if (index == -1) throw new IOException("Placeholder not found in .class file");

        System.arraycopy(paddedSecret, 0, data, index, placeholder.length);
        Files.write(classFile, data);
    }

    private static void modifyJarFile(Path jarFile, String secret) throws IOException {
        Path tempDir = Files.createTempDirectory("jar_edit_");

        try (JarFile jar = new JarFile(jarFile.toFile())) {
            jar.stream().forEach(entry -> {
                Path entryDest = tempDir.resolve(entry.getName());
                try {
                    if (entry.isDirectory()) {
                        Files.createDirectories(entryDest);
                    } else {
                        Files.createDirectories(entryDest.getParent());
                        try (InputStream in = jar.getInputStream(entry)) {
                            Files.copy(in, entryDest, StandardCopyOption.REPLACE_EXISTING);
                        }
                    }
                } catch (IOException e) {
                    throw new UncheckedIOException(e);
                }
            });
        }

        Path viewerClass = findSecretViewerClass(tempDir);
        if (viewerClass == null) {
            throw new IOException("SecretViewer.class not found in JAR");
        }

        modifyClassFile(viewerClass, secret);

        Path tempJar = Files.createTempFile("modified_", ".jar");
        try (FileOutputStream fos = new FileOutputStream(tempJar.toFile());
             JarOutputStream jos = new JarOutputStream(fos)) {

            Files.walk(tempDir)
                    .filter(Files::isRegularFile)
                    .forEach(file -> {
                        try {
                            String relativePath = tempDir.relativize(file).toString().replace("\\", "/");
                            jos.putNextEntry(new JarEntry(relativePath));
                            Files.copy(file, jos);
                            jos.closeEntry();
                        } catch (IOException e) {
                            throw new UncheckedIOException(e);
                        }
                    });
        }

        Files.copy(tempJar, jarFile, StandardCopyOption.REPLACE_EXISTING);

        deleteRecursive(tempDir);
        Files.deleteIfExists(tempJar);
    }

    private static void signJar(File jarFile) {
        try {
            String alias = "selfsigned";
            String keystorePath = "keystore.jks";
            String storepass = "changeit";
            String keypass = "changeit";

            if (!Files.exists(Paths.get(keystorePath))) {
                Process p = new ProcessBuilder("keytool", "-genkeypair",
                        "-alias", alias,
                        "-keyalg", "RSA",
                        "-keystore", keystorePath,
                        "-storepass", storepass,
                        "-keypass", keypass,
                        "-dname", "CN=SecretSigner, OU=Lab, O=University, L=City, S=State, C=US",
                        "-validity", "365")
                        .inheritIO()
                        .start();
                p.waitFor();
            }

            Process sign = new ProcessBuilder("jarsigner",
                    "-keystore", keystorePath,
                    "-storepass", storepass,
                    "-keypass", keypass,
                    jarFile.getAbsolutePath(), alias)
                    .inheritIO()
                    .start();
            sign.waitFor();

            JOptionPane.showMessageDialog(null, "JAR signed successfully!");

        } catch (IOException | InterruptedException e) {
            JOptionPane.showMessageDialog(null, "Signing failed: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static Path findSecretViewerClass(Path root) throws IOException {
        return Files.walk(root)
                .filter(path -> path.getFileName().toString().equals("SecretViewer.class"))
                .findFirst()
                .orElse(null);
    }

    private static void deleteRecursive(Path path) throws IOException {
        if (Files.isDirectory(path)) {
            try (DirectoryStream<Path> entries = Files.newDirectoryStream(path)) {
                for (Path entry : entries) {
                    deleteRecursive(entry);
                }
            }
        }
        Files.delete(path);
    }

    private static int indexOf(byte[] haystack, byte[] needle) {
        outer: for (int i = 0; i <= haystack.length - needle.length; i++) {
            for (int j = 0; j < needle.length; j++) {
                if (haystack[i + j] != needle[j]) continue outer;
            }
            return i;
        }
        return -1;
    }
}
